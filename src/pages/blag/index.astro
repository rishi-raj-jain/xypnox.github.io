---
import { getCollection } from "astro:content";
import Layout from "../../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import Blag from "../../vectors/blag.astro";

const blogEntriesAll = await getCollection("blog");

const blogEntries = blogEntriesAll
  .sort((a, b) => {
    const [aDateNum, bDateNum] = [a.data.date.getTime(), b.data.date.getTime()];
    return bDateNum - aDateNum;
  })
  .filter((blogPostEntry) => {
    return blogPostEntry.slug.split("/").length === 1;
  });

const allTags = blogEntriesAll
  .map((blogPostEntry) => blogPostEntry.data.tags)
  .flat();

const dateFormatOption = {
  day: "numeric",
  month: "long",
  year: "numeric",
} as const;
---

<Layout title="Blog">
  <main class="blog-index">
    <header>
      <Blag />
      <p>
        I write about things I learn, things I make, and things I think about.
      </p>
    </header>

    <div class="blog-wrapper">
      <div class="blog-list">
        {
          blogEntries.map((blogPostEntry) => (
            <a class="blog-entry" href={`/blag/posts/${blogPostEntry.slug}`}>
              {blogPostEntry.data.coverImage && (
                <div class="coverImage">
                  <Image
                    alt={blogPostEntry.data.coverAlt ?? "Cover Image"}
                    src={blogPostEntry.data.coverImage}
                  />
                </div>
              )}
              <h2>{blogPostEntry.data.title}</h2>
              {blogPostEntry.data.description && (
                <p class="description">{blogPostEntry.data.description}</p>
              )}
              <div class="details">
                <div>
                  <time datetime={blogPostEntry.data.date.toISOString()}>
                    {blogPostEntry.data.date.toLocaleDateString(
                      "en-US",
                      dateFormatOption
                    )}
                  </time>
                  {blogPostEntry.data.tags && (
                    <>
                      <span class="separator">â€¢</span>
                      <div class="tags">
                        {blogPostEntry.data.tags.map((tag: string) => (
                          <span class="tag">#{tag}</span>
                        ))}
                      </div>
                    </>
                  )}
                </div>
              </div>
            </a>
          ))
        }
      </div>
      <div class="tags-list">
        <h3>Tags</h3>
        <ul>
          {
            [...new Set(allTags)].map((tag) => (
              <li>
                <a href={`/blog/tags/${tag}`}>#{tag}</a>
              </li>
            ))
          }
        </ul>
      </div>
    </div>
  </main>
</Layout>

<style>
  .blog-index {
    max-width: 1000px;
    margin: 0 auto;
  }
  .blog-index header {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin: 4rem 0;
  }

  .blog-index header :global(svg) {
    width: 100%;
    max-width: 400px;
    height: auto;
  }

  .blog-index header p {
    margin: 0;
    font-size: var(--font-size-md);
  }

  .blog-list {
    display: flex;
    flex-direction: column;
    gap: 3rem;
    flex-grow: 1;
    width: 100%;
  }

  .blog-wrapper {
    display: flex;
    flex-direction: row;
    gap: 1rem;
  }

  .blog-entry {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    text-decoration: none;
    color: var(--text);
    width: 100%;
  }

  .blog-entry .coverImage {
    display: flex;
    width: 100%;
    height: 200px;
    overflow: hidden;
  }

  .blog-entry .coverImage img {
    width: auto;
    height: 100%;
    object-fit: contain;
    object-position: left;
    border-radius: 0.5rem;
  }

  .description {
    color: var(--text);
  }

  .blog-entry h2,
  .blog-entry p {
    margin: 0;
  }

  .blog-entry h2 {
    color: var(--heading);
  }

  .blog-entry .details {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    color: var(--fadeText);
    gap: 1rem;
  }

  .blog-entry .details .author {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--fadeText);
  }

  .author-icon {
    border-radius: 50%;
  }

  .blog-entry .details div {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5rem;
  }

  .blog-entry .details time {
    font-size: 0.9rem;
  }

  .blog-entry:hover {
    color: var(--primary-color);
  }

  .blog-entry .tags {
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
  }

  .tags-list {
    max-width: 10rem;
  }

  .tags-list ul {
    display: flex;
    flex-direction: column;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: 0.5rem;
  }
  .tags-list li a {
    display: flex;
    flex-direction: row;
    align-items: center;
    width: max-content;
    color: var(--text);
    text-decoration: none;
    background-color: var(--surface);
    padding: 0.25rem 0.5rem;
    border-radius: 0.5rem;
  }

  .tags-list li a:hover {
    color: var(--primary-color);
  }

  @media (max-width: 768px) {
    .blog-wrapper {
      flex-direction: column;
    }
    .blog-list {
      flex-direction: column;
    }
    .tags-list {
      max-width: 100%;
    }
  }

  @media (max-width: 390px) {
    .blog-entry .details {
      gap: 0.5rem;
    }
    .blog-entry .details div {
      flex-direction: row;
      flex-wrap: wrap;
      align-items: center;
      width: 100%;
      gap: 0.5rem;
    }
    .separator {
      display: none;
    }
    .blog-entry .details time {
      font-size: 0.8rem;
    }
  }
</style>

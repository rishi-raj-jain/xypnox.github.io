---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Layout from "../../../layouts/BaseLayout.astro";
import Toc from "../../../components/Toc.astro";
import Tag from "../../../components/Tag.astro";

interface Props {
  entry: CollectionEntry<"blog">;
  entryList: {
    slug: string;
    data: any;
  }[];
}

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");

  const entryList = blogEntries.map((entry) => ({
    slug: entry.slug,
    data: entry.data,
  }));

  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry, entryList },
  }));
}

// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content, headings } = await entry.render();

// console.log("In Blog post EntryList", {
//   entry,
// });

const dateFormatOption = {
  day: "numeric",
  month: "long",
  year: "numeric",
} as const;
---

<Layout showLoading={false} title={entry.data.title}>
  <div class="postHeading">
    <h1 class="text-gradient-fx">{entry.data.title}</h1>
    {
      entry.data.description && (
        <p class="description">{entry.data.description}</p>
      )
    }
    <div class="details">
      <time datetime={entry.data.date.toISOString()}>
        {entry.data.date.toLocaleDateString("en-US", dateFormatOption)}
      </time>
      {entry.data.tags && (
        <>
          <span class="separator">â€¢</span>
          <div class="tags">
            {entry.data.tags.map((tag: string) => (
              <Tag tag={tag} />
            ))}
          </div>
        </>
      )}
    </div>
  </div>
  {
    entry.data.coverImage && (
      <div class="coverImage">
        <Image
          alt={entry.data.coverAlt ?? "Cover Image"}
          src={entry.data.coverImage}
        />
        {entry.data.coverAlt && <p>{entry.data.coverAlt}</p>}
      </div>
    )
  }
  <div class="content-wrapper">
    <div class="content">
      <Content />
      <script
        is:inline
        src="https://utteranc.es/client.js"
        repo="xypnox/blag"
        issue-term="pathname"
        label="comments"
        theme="photon-dark"
        crossorigin="anonymous"
        async
      ></script>
    </div>
    {
      headings.length > 0 && (
        <div class="content-toc">
          <Toc headings={headings} />
        </div>
      )
    }
  </div>
</Layout>

<style>
  @import url("https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;0,700;1,400;1,600;1,700&display=swap");
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .postHeading {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 800px;
    margin: 0 auto;
    margin-top: 4rem;
    margin-bottom: 2rem;
  }

  .postHeading h1,
  .postHeading p {
    margin: 0;
  }
  .postHeading h1 {
    font-family: "Jost", sans-serif;
    font-size: var(--font-size-xxl);
    color: var(--heading);
  }

  .postHeading .description {
    font-family: "Jost", sans-serif;
    font-size: var(--font-size-md);
    color: var(--text);
  }

  .content-wrapper {
    display: flex;
    flex-direction: row;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .content-toc {
    position: sticky;
    top: 4rem;
    height: max-content;
    max-height: 80vh;
    overflow-y: auto;
    margin: 1rem auto;
    border-radius: 0.5rem;
    border: 1px solid var(--border);
    box-shadow: 0 0 10px var(--shadow);
  }

  .content {
    display: flex;
    flex-direction: column;
    max-width: 800px;
    width: 100%;
    margin: 0 auto;
    line-height: 1.5;
    font-family: "Crimson Text", serif;
    font-size: 1.2rem;
  }

  .details {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    color: var(--fadeText);
    gap: 1rem;
  }

  .coverImage {
    max-width: 1200px;
    width: 100%;
    margin: 0 auto;
  }

  .coverImage img {
    width: 100%;
    height: auto;
  }

  .coverImage p {
    text-align: center;
    color: var(--fadeText);
  }

  @media (max-width: 1200px) {
    .content-wrapper {
      flex-direction: column-reverse;
    }
    .content-toc {
      width: 100%;
      max-width: 800px;
      position: relative;
      margin-bottom: 2rem;
    }
  }

  @media (max-width: 390px) {
    .details {
      flex-wrap: wrap;
    }

    .separator {
      display: none;
    }
  }
</style>

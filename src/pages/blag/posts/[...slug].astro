---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Layout from "../../../layouts/BaseLayout.astro";
import Toc from "../../../components/Toc.astro";

interface Props {
  entry: CollectionEntry<"blog">;
  entryList: {
    slug: string;
    data: any;
  }[];
}

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");

  const entryList = blogEntries.map((entry) => ({
    slug: entry.slug,
    data: entry.data,
  }));

  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry, entryList },
  }));
}

// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content, headings } = await entry.render();

// console.log("In Blog post EntryList", {
//   entry,
// });

const dateFormatOption = {
  day: "numeric",
  month: "long",
  year: "numeric",
};
---

<Layout title={entry.data.title}>
  <div class="postHeading">
    <h1>{entry.data.title}</h1>
    <div class="details">
      <time datetime={entry.data.date.toISOString()}>
        {entry.data.date.toLocaleDateString("en-US", dateFormatOption)}
      </time>
      {
        entry.data.tags && (
          <>
            <span class="separator">â€¢</span>
            <div class="tags">
              {entry.data.tags.map((tag: string) => (
                <a href={`/blog/tags/${tag}`}>#{tag}</a>
              ))}
            </div>
          </>
        )
      }
    </div>
  </div>
  {
    entry.data.coverImage && (
      <div class="coverImage">
        <Image
          alt={entry.data.coverAlt ?? "Cover Image"}
          src={entry.data.coverImage}
        />
        {entry.data.coverAlt && <p>{entry.data.coverAlt}</p>}
      </div>
    )
  }
  <Toc headings={headings} />
  <div class="content">
    <Content />
    <script
      is:inline
      src="https://utteranc.es/client.js"
      repo="xypnox/blag"
      issue-term="pathname"
      label="comments"
      theme="photon-dark"
      crossorigin="anonymous"
      async
    ></script>
  </div>
</Layout>

<style>
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .postHeading {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 800px;
    margin: 0 auto;
    margin-top: 4rem;
    margin-bottom: 2rem;
  }


  .content {
    display: flex;
    flex-direction: column;
    max-width: 800px;
    margin: 0 auto;
  }

  .details {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    color: var(--text-fade);
    gap: 1rem;
  }

  .coverImage {
    max-width: 1200px;
    width: 100%;
    margin: 0 auto;
  }

  .coverImage img {
    width: 100%;
    height: auto;
  }

  @media (max-width: 390px) {
    .details {
      flex-wrap: wrap;
    }

    .separator {
      display: none;
    }
  }
</style>
